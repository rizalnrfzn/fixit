// Mocks generated by Mockito 5.4.4 from annotations
// in fixit/test/helpers/test_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:fixit/core/core.dart' as _i7;
import 'package:fixit/features/features.dart' as _i5;
import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i3;
import 'package:flutter/src/widgets/notification_listener.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_1 extends _i1.SmartFake implements _i3.Widget {
  _FakeWidget_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_2 extends _i1.SmartFake
    implements _i3.InheritedWidget {
  _FakeInheritedWidget_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_3 extends _i1.SmartFake
    implements _i4.DiagnosticsNode {
  _FakeDiagnosticsNode_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i4.TextTreeConfiguration? parentConfiguration,
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i5.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i5.AuthUser>> login(
          _i5.LoginParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [params],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i5.AuthUser>>.value(
            _FakeEither_0<_i7.Failure, _i5.AuthUser>(
          this,
          Invocation.method(
            #login,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i5.AuthUser>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i5.AuthUser>> register(
          _i5.RegisterParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [params],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i5.AuthUser>>.value(
            _FakeEither_0<_i7.Failure, _i5.AuthUser>(
          this,
          Invocation.method(
            #register,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i5.AuthUser>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i5.AuthUser>> registerData(
          _i5.RegisterDataParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerData,
          [params],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i5.AuthUser>>.value(
            _FakeEither_0<_i7.Failure, _i5.AuthUser>(
          this,
          Invocation.method(
            #registerData,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i5.AuthUser>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i5.AuthUser>> editProfile(
          _i5.EditProfileParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #editProfile,
          [params],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i5.AuthUser>>.value(
            _FakeEither_0<_i7.Failure, _i5.AuthUser>(
          this,
          Invocation.method(
            #editProfile,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i5.AuthUser>>);

  @override
  _i6.Stream<_i5.AuthUser> streamUser(String? uid) => (super.noSuchMethod(
        Invocation.method(
          #streamUser,
          [uid],
        ),
        returnValue: _i6.Stream<_i5.AuthUser>.empty(),
      ) as _i6.Stream<_i5.AuthUser>);
}

/// A class which mocks [DirectionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectionRepository extends _i1.Mock
    implements _i5.DirectionRepository {
  MockDirectionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i5.Direction>> getDirection(
          _i5.DirectionParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDirection,
          [params],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i5.Direction>>.value(
            _FakeEither_0<_i7.Failure, _i5.Direction>(
          this,
          Invocation.method(
            #getDirection,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i5.Direction>>);
}

/// A class which mocks [ElectronicRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockElectronicRepository extends _i1.Mock
    implements _i5.ElectronicRepository {
  MockElectronicRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<List<_i5.Electronic>> streamElectronics() => (super.noSuchMethod(
        Invocation.method(
          #streamElectronics,
          [],
        ),
        returnValue: _i6.Stream<List<_i5.Electronic>>.empty(),
      ) as _i6.Stream<List<_i5.Electronic>>);
}

/// A class which mocks [GeolocationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeolocationRepository extends _i1.Mock
    implements _i5.GeolocationRepository {
  MockGeolocationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i5.Geolocation>> getLocation() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocation,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i5.Geolocation>>.value(
            _FakeEither_0<_i7.Failure, _i5.Geolocation>(
          this,
          Invocation.method(
            #getLocation,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i5.Geolocation>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i5.Geolocation>> changeLocation(
          _i5.ChangeLocationParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeLocation,
          [params],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i5.Geolocation>>.value(
            _FakeEither_0<_i7.Failure, _i5.Geolocation>(
          this,
          Invocation.method(
            #changeLocation,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i5.Geolocation>>);
}

/// A class which mocks [RepairOrderRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepairOrderRepository extends _i1.Mock
    implements _i5.RepairOrderRepository {
  MockRepairOrderRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<List<_i5.RepairOrder>> streamOrders(String? uid) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamOrders,
          [uid],
        ),
        returnValue: _i6.Stream<List<_i5.RepairOrder>>.empty(),
      ) as _i6.Stream<List<_i5.RepairOrder>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>> postOrder(
          _i5.PostOrderParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #postOrder,
          [params],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>>.value(
            _FakeEither_0<_i7.Failure, _i5.RepairOrder>(
          this,
          Invocation.method(
            #postOrder,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>> acceptRepair(
          _i5.RepairOrder? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #acceptRepair,
          [params],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>>.value(
            _FakeEither_0<_i7.Failure, _i5.RepairOrder>(
          this,
          Invocation.method(
            #acceptRepair,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>> rejectRepair(
          _i5.RepairOrder? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #rejectRepair,
          [params],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>>.value(
            _FakeEither_0<_i7.Failure, _i5.RepairOrder>(
          this,
          Invocation.method(
            #rejectRepair,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>> paymentOrder(
          _i5.RepairOrder? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #paymentOrder,
          [params],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>>.value(
            _FakeEither_0<_i7.Failure, _i5.RepairOrder>(
          this,
          Invocation.method(
            #paymentOrder,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>> review(
          _i5.PostReviewParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #review,
          [params],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>>.value(
            _FakeEither_0<_i7.Failure, _i5.RepairOrder>(
          this,
          Invocation.method(
            #review,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>> cancelOrder(
          _i5.RepairOrder? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelOrder,
          [params],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>>.value(
            _FakeEither_0<_i7.Failure, _i5.RepairOrder>(
          this,
          Invocation.method(
            #cancelOrder,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i5.RepairOrder>>);
}

/// A class which mocks [TechnicianRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTechnicianRepository extends _i1.Mock
    implements _i5.TechnicianRepository {
  MockTechnicianRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<List<_i5.Technician>> streamTechnicians() => (super.noSuchMethod(
        Invocation.method(
          #streamTechnicians,
          [],
        ),
        returnValue: _i6.Stream<List<_i5.Technician>>.empty(),
      ) as _i6.Stream<List<_i5.Technician>>);

  @override
  _i6.Stream<List<_i5.Review>> streamReviews(String? uid) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamReviews,
          [uid],
        ),
        returnValue: _i6.Stream<List<_i5.Review>>.empty(),
      ) as _i6.Stream<List<_i5.Review>>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i3.BuildContext {
  @override
  _i3.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_1(
          this,
          Invocation.getter(#widget),
        ),
        returnValueForMissingStub: _FakeWidget_1(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i3.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.InheritedWidget dependOnInheritedElement(
    _i3.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_2(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
        returnValueForMissingStub: _FakeInheritedWidget_2(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i3.InheritedWidget);

  @override
  void visitAncestorElements(_i3.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i3.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i8.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.DiagnosticsNode describeElement(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);

  @override
  _i4.DiagnosticsNode describeWidget(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);

  @override
  List<_i4.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i4.DiagnosticsNode>[],
        returnValueForMissingStub: <_i4.DiagnosticsNode>[],
      ) as List<_i4.DiagnosticsNode>);

  @override
  _i4.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i4.DiagnosticsNode);
}
